@if (_loading)
{
    <Loader Message="Preparing editor" />
}
else
{
    <EditForm Model="Material" OnSubmit="SaveMaterial">
        <div class="d-flex flex-row">
            <div class="flex-fill">
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Name</label>
                    <div class="col-sm-10">
                        <InputText class="form-control" @bind-Value="Material.Name" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Help text</label>
                    <div class="col-sm-10">
                        <InputText class="form-control" @bind-Value="Material.Description" />
                    </div>
                </div>

                @foreach (var eval in Material.Evaluations.OrderBy(e => e.Property.Name))
                {
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label @(eval.Property.Visible? "required":null)">@eval.Property.Name</label>
                        <div class="col-sm-7">
                            @if (eval.Property.IsDichotomous)
                            {
                                <InputSelect class="form-control" @bind-Value="eval.ValueBinStr">
                                    @foreach (var option in eval.BinOptions)
                                    {
                            <option value="@option">@option</option>
                                    }
                    </InputSelect>
                            }
                            else
                            {
                                <InputNumber class="form-control" @bind-Value="eval.ValueDec" />
                            }
                        </div>
                        <div class="col-sm-2">
                            @eval.Property.Unit
                        </div>
                        @if (eval.Property.Visible && eval.ValueBin == null && eval.ValueDec == null)
                        {
                            <div class="btn col-sm-1" type="button" data-toggle="tooltip" data-placement="bottom"
                     title="@($"Property is visible, so that is required")">
                                <span class="oi oi-warning" style="color: red"></span>
                            </div>
                        }

                    </div>

                }
                <div class="d-flex">
                    <div class="m-2">
                        <button class="btn btn-outline-primary" type="submit">Save changes</button>
                    </div>
                    <div class="m-2">
                        <button class="btn btn-outline-danger" type="button" @onclick="@(()=> MaterialChange.InvokeAsync(null))">
                            Discard changes
                        </button>
                    </div>
                </div>

            </div>
        </div>
    </EditForm>

}

