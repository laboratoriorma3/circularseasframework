<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="AllParametersMustProvide" xml:space="preserve">
    <value>You must select all the parameters</value>
  </data>
  <data name="CanPrintedFromLocal" xml:space="preserve">
    <value>File available for printing from local files</value>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="ConnectionError" xml:space="preserve">
    <value>Connection error</value>
  </data>
  <data name="DeletingBodyErrorProcesing" xml:space="preserve">
    <value>Cant't delete a file which is being printed</value>
  </data>
  <data name="DeletingBodySelectOne" xml:space="preserve">
    <value>You must select a file to delete</value>
  </data>
  <data name="DeletingHeader" xml:space="preserve">
    <value>Deleting failure</value>
  </data>
  <data name="DeletingReturn" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="DisconnectedBack" xml:space="preserve">
    <value>Come to main menu</value>
  </data>
  <data name="DisconnectedBody" xml:space="preserve">
    <value>Can`t connect to Octoprint</value>
  </data>
  <data name="DisconnectedHeader" xml:space="preserve">
    <value>Connection error</value>
  </data>
  <data name="DisconnectedWait" xml:space="preserve">
    <value>Wait</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FileNotProvided" xml:space="preserve">
    <value>No file has been provided</value>
  </data>
  <data name="Material" xml:space="preserve">
    <value>Material</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OrderID" xml:space="preserve">
    <value>Order Identifier</value>
  </data>
  <data name="OrderRegistered" xml:space="preserve">
    <value>Order registered successfully</value>
  </data>
  <data name="OrderStock" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="OutStock" xml:space="preserve">
    <value>Out of stock</value>
  </data>
  <data name="OutStockMessage" xml:space="preserve">
    <value>There aren't stock for this kind of filament</value>
  </data>
  <data name="PerhapsSupportNeeded" xml:space="preserve">
    <value>The request could not be completed. Try enabling support and if the problem persists, please contact an administrator.</value>
  </data>
  <data name="PrintingBodyProcessing" xml:space="preserve">
    <value>Printer is processing a part. wait to end first</value>
  </data>
  <data name="PrintingBodySelectOne" xml:space="preserve">
    <value>You must select one file to print</value>
  </data>
  <data name="PrintingDirectly" xml:space="preserve">
    <value>Do you want to directly print the selected file?</value>
  </data>
  <data name="PrintingHeaderError" xml:space="preserve">
    <value>Printing failure</value>
  </data>
  <data name="PrintingReturn" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="PrintingWorking" xml:space="preserve">
    <value>The printer is working. The file will be uploaded but you must wait for the current one to finish. Later you can select it from the local print menu</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="SelectMaterial" xml:space="preserve">
    <value>You must select one material</value>
  </data>
  <data name="ServerDisconnected" xml:space="preserve">
    <value>Can't connect to server. Try it later</value>
  </data>
  <data name="SpendOneSpool" xml:space="preserve">
    <value>Confirms that you have spent 1 spool of</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="SucessUpload" xml:space="preserve">
    <value>Uploaded successfully</value>
  </data>
  <data name="SureConfirmOrders" xml:space="preserve">
    <value>Are you sure to confirm the order with the following data?</value>
  </data>
  <data name="UnknownError" xml:space="preserve">
    <value>Unknown error</value>
  </data>
  <data name="UploadOnlyGCODE" xml:space="preserve">
    <value>Only files in .gcode format are supported. Upload failed</value>
  </data>
  <data name="UploadOnlySTL" xml:space="preserve">
    <value>You must select only stl files</value>
  </data>
  <data name="UwpOrder" xml:space="preserve">
    <value>On the desktop app, you can't scan a QR. Instead, select the order from the list displayed on the screen and then click this button to accept.</value>
  </data>
  <data name="UwpSpoolStock" xml:space="preserve">
    <value>On the desktop app, you can't scan a QR. Instead, select the material from the list that was displayed on the screen and then click this button to discard a spent spool.</value>
  </data>
  <data name="WarningHeader" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>